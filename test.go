package main

import (
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strings"
	"syscall"
	"time"
	"unsafe"

	"github.com/lxn/walk"
)

var CoreLocalVersion string
var CoreRemoteVersion string
var DashboardLocalVersion string
var DashboardRemoteVersion string
var MihomoStatus string
var TunStatus string

var MainWindow *walk.MainWindow
var Icon *walk.Icon
var NotifyIcon *walk.NotifyIcon
var IcoData []byte = []byte{
	0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x40, 0x40, 0x00, 0x00, 0x01, 0x00,
	0x08, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x89, 0x50,
	0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48,
	0x44, 0x52, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x06,
	0x00, 0x00, 0x00, 0xaa, 0x69, 0x71, 0xde, 0x00, 0x00, 0x00, 0x09, 0x70,
	0x48, 0x59, 0x73, 0x00, 0x00, 0x03, 0xe8, 0x00, 0x00, 0x03, 0xe8, 0x01,
	0xb5, 0x7b, 0x52, 0x6b, 0x00, 0x00, 0x03, 0x20, 0x49, 0x44, 0x41, 0x54,
	0x78, 0x9c, 0xed, 0x99, 0xbb, 0x71, 0xeb, 0x30, 0x10, 0x45, 0x11, 0xa2,
	0x0b, 0x74, 0xa0, 0x36, 0x98, 0xa0, 0x03, 0x55, 0xc0, 0x50, 0x09, 0xdb,
	0x50, 0x03, 0x7e, 0x4d, 0xa8, 0x02, 0xab, 0x84, 0x67, 0x67, 0x08, 0xa4,
	0x1e, 0xec, 0x9c, 0x7a, 0x73, 0x35, 0x5c, 0xce, 0x1a, 0x8f, 0x1f, 0x80,
	0x24, 0x3e, 0x16, 0x11, 0xec, 0xf0, 0x23, 0x0d, 0x81, 0x3d, 0xd8, 0x7b,
	0x41, 0x10, 0x42, 0xd7, 0x27, 0xb1, 0xe7, 0x10, 0xa9, 0x3b, 0x90, 0x3a,
	0x04, 0x9d, 0x98, 0xdb, 0xfd, 0xb1, 0xb7, 0xd0, 0x05, 0xc0, 0xa9, 0x54,
	0x80, 0x28, 0x12, 0xa8, 0x8b, 0x07, 0x88, 0x62, 0x82, 0x75, 0x99, 0x05,
	0x44, 0xea, 0x29, 0xa9, 0x4c, 0x83, 0xb7, 0x9d, 0xbd, 0x07, 0x7c, 0x7d,
	0x7f, 0x3f, 0xda, 0xb6, 0xed, 0x03, 0xd7, 0xbb, 0x01, 0xd0, 0xb2, 0xa4,
	0xcf, 0xe7, 0x73, 0x0f, 0x23, 0x36, 0x04, 0x1d, 0x1b, 0x00, 0x1f, 0x75,
	0x24, 0xae, 0x94, 0x7a, 0x48, 0x29, 0x9f, 0x47, 0x5c, 0xc7, 0xae, 0x06,
	0x1d, 0x0b, 0x00, 0x4f, 0xfc, 0x72, 0xb9, 0x3c, 0x0e, 0x87, 0xc3, 0x33,
	0x71, 0x44, 0xd3, 0x34, 0xfd, 0x39, 0xee, 0xe3, 0xf7, 0x58, 0x20, 0x74,
	0x68, 0x00, 0x3c, 0x71, 0x5c, 0x57, 0x55, 0xd5, 0x27, 0x4b, 0xf1, 0xf7,
	0xe3, 0xf3, 0xbf, 0x7b, 0xf8, 0x1f, 0xee, 0x87, 0x86, 0xa0, 0x43, 0x02,
	0xe0, 0xba, 0xe6, 0xa3, 0xec, 0x02, 0x80, 0xe2, 0x78, 0x3c, 0x06, 0xf5,
	0x07, 0x1d, 0x02, 0x00, 0x1f, 0xf5, 0xb7, 0xb7, 0x3f, 0xbd, 0xce, 0x97,
	0x00, 0x08, 0xed, 0x0f, 0x7a, 0x4b, 0x00, 0x3c, 0xf1, 0xf7, 0xeb, 0xf5,
	0x87, 0xce, 0xd7, 0x00, 0x08, 0xe9, 0x0f, 0x7a, 0x2b, 0x00, 0x73, 0x3a,
	0xdf, 0x02, 0xc0, 0x90, 0x3f, 0xac, 0x05, 0xa1, 0xd7, 0x02, 0x70, 0xd5,
	0xf9, 0x96, 0x00, 0xb6, 0xf4, 0x07, 0xbd, 0x06, 0x80, 0x8f, 0xce, 0x43,
	0x00, 0x18, 0xf2, 0x87, 0x68, 0x00, 0xbe, 0x3a, 0xf2, 0x38, 0x77, 0xd5,
	0x7a, 0x08, 0x00, 0xe4, 0x0d, 0x34, 0x20, 0x78, 0x56, 0x34, 0x00, 0xe6,
	0x76, 0xef, 0x4d, 0x69, 0x4d, 0x15, 0x2c, 0x05, 0xc0, 0x47, 0x1f, 0xfd,
	0xe0, 0x7d, 0x8a, 0x02, 0xe0, 0xfd, 0x7a, 0xed, 0x47, 0x00, 0x49, 0x2c,
	0xf5, 0x81, 0x25, 0x00, 0xd0, 0x0e, 0x25, 0x4c, 0xa6, 0x4b, 0x7d, 0xc3,
	0x60, 0x44, 0x05, 0x20, 0x2d, 0x53, 0xc2, 0xef, 0x38, 0x0f, 0x01, 0x00,
	0xc9, 0x52, 0xfb, 0x36, 0xec, 0xe4, 0x00, 0x64, 0x57, 0x96, 0xe8, 0x98,
	0xcf, 0xbb, 0x80, 0x0b, 0x00, 0x3c, 0x07, 0xcf, 0xb3, 0x17, 0x51, 0xf6,
	0x73, 0x92, 0x03, 0x90, 0x0c, 0x84, 0xab, 0x3f, 0x4c, 0x01, 0xb0, 0x75,
	0x3e, 0x05, 0x34, 0x2b, 0x00, 0x92, 0x8d, 0xdc, 0x9c, 0x3f, 0x8c, 0x01,
	0xe0, 0x92, 0x72, 0x79, 0xb9, 0xca, 0x12, 0x80, 0x74, 0xf0, 0x07, 0x1b,
	0xc0, 0x94, 0xce, 0x5d, 0x01, 0xb8, 0x4e, 0x87, 0x3a, 0x16, 0x80, 0x29,
	0x7f, 0x20, 0x20, 0x2e, 0x3a, 0xff, 0xd5, 0x00, 0xe4, 0x80, 0x3f, 0x20,
	0x51, 0x24, 0x8e, 0x4e, 0xbb, 0xe8, 0xfc, 0x25, 0x00, 0x48, 0xcb, 0x1f,
	0x96, 0x2e, 0xa2, 0x7e, 0x35, 0x00, 0xa5, 0xd4, 0x33, 0x61, 0x1c, 0x01,
	0x80, 0x5f, 0xbf, 0x3c, 0x80, 0xa6, 0x69, 0x9e, 0x1d, 0x84, 0xf6, 0x39,
	0x00, 0x5c, 0xe3, 0xfe, 0x9a, 0x55, 0x65, 0xd6, 0x00, 0xaa, 0x6e, 0x1d,
	0x0f, 0xdd, 0xf3, 0x4a, 0x20, 0x00, 0x43, 0x80, 0x5e, 0x02, 0xc0, 0xa1,
	0xfb, 0x92, 0x83, 0xb0, 0x4b, 0x7c, 0x08, 0x00, 0xdd, 0xc7, 0xff, 0x7d,
	0xbf, 0x2c, 0x65, 0x05, 0x40, 0x29, 0xd5, 0x77, 0x66, 0xcc, 0xe0, 0xc6,
	0x00, 0xf0, 0xaa, 0x41, 0x3b, 0x43, 0xf0, 0xb2, 0x06, 0xd0, 0x74, 0x65,
	0x3c, 0xa7, 0xe7, 0x39, 0x00, 0x14, 0x2e, 0xfe, 0x80, 0xfe, 0x24, 0x07,
	0x50, 0x75, 0x3a, 0x47, 0x27, 0x5c, 0xca, 0xd6, 0x15, 0x00, 0x05, 0xfc,
	0x63, 0xcc, 0x1f, 0x92, 0x02, 0x50, 0x4c, 0xb3, 0x3e, 0x53, 0x99, 0x2f,
	0x80, 0x29, 0x7f, 0x48, 0x06, 0xe0, 0xd8, 0x95, 0xe7, 0x92, 0x17, 0x99,
	0x25, 0x00, 0xec, 0x6a, 0xa3, 0x6a, 0xc8, 0x42, 0x02, 0xd2, 0x33, 0x30,
	0x82, 0x00, 0xb0, 0xf6, 0xbb, 0x62, 0x12, 0x13, 0x6c, 0x3d, 0x37, 0x40,
	0x42, 0x01, 0xe0, 0x8b, 0x28, 0x1c, 0xa3, 0x00, 0x30, 0x0b, 0xb6, 0xc0,
	0xb6, 0x06, 0xc0, 0x3f, 0x96, 0x50, 0x45, 0xa2, 0x1f, 0xd1, 0x00, 0x98,
	0xdb, 0xbd, 0x6f, 0x68, 0xe9, 0xe6, 0xc8, 0x52, 0x00, 0x7c, 0x53, 0x84,
	0x66, 0x1d, 0x0a, 0xf2, 0x82, 0x28, 0x00, 0x4c, 0x07, 0x81, 0x1a, 0xa5,
	0x95, 0x9d, 0xeb, 0x6b, 0xac, 0x2f, 0x00, 0xfa, 0x58, 0x42, 0xed, 0x60,
	0x36, 0xa0, 0xc4, 0x71, 0x1e, 0x6d, 0x5f, 0xc0, 0x0c, 0x04, 0x20, 0x20,
	0x7c, 0xfc, 0xc1, 0x15, 0x00, 0xd7, 0x39, 0x9e, 0xcf, 0x13, 0xf7, 0x29,
	0xf9, 0xa0, 0x00, 0xcc, 0x08, 0x88, 0x29, 0x7f, 0x98, 0x03, 0x60, 0x6f,
	0x7d, 0x71, 0x9d, 0xfb, 0x96, 0x7b, 0x34, 0x00, 0xa6, 0x93, 0x05, 0x95,
	0xe4, 0x94, 0x3f, 0x4c, 0x01, 0x98, 0xd2, 0xb9, 0xcf, 0xee, 0x4f, 0x12,
	0x00, 0xc6, 0x02, 0x31, 0xe6, 0x0f, 0x43, 0x00, 0xb6, 0xd6, 0x79, 0x52,
	0x00, 0x66, 0xc6, 0x1f, 0x38, 0x00, 0x5b, 0xe7, 0x5b, 0x97, 0x7b, 0x52,
	0x00, 0xc6, 0x02, 0xc1, 0x35, 0xcd, 0x8f, 0x21, 0x74, 0x9e, 0x15, 0x00,
	0x33, 0xe0, 0x0f, 0x14, 0xa1, 0x74, 0x9e, 0x1d, 0x00, 0xc3, 0xaa, 0xc1,
	0x9e, 0xce, 0x42, 0xe8, 0x3c, 0x5b, 0x00, 0xc6, 0x02, 0x81, 0x63, 0xac,
	0xc4, 0xb3, 0x02, 0x60, 0x12, 0x86, 0x2e, 0x00, 0x4e, 0xa5, 0x02, 0x44,
	0x91, 0x40, 0x5d, 0x3c, 0x40, 0x14, 0x13, 0xac, 0xcb, 0x2c, 0x20, 0x48,
	0x0a, 0x7b, 0x8b, 0x7f, 0x87, 0x8d, 0x9e, 0x86, 0x30, 0xb2, 0x7e, 0xd8,
	0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
}

type Release struct {
	TagName string `json:"tag_name"`
}

// 获取 GitHub repo 的最新版本号
func GetLatestVersion(repoOwner, repoName string) (string, error) {
	// 构建 GitHub API 地址
	apiURL := fmt.Sprintf("https://api.github.com/repos/%s/%s/releases/latest", repoOwner, repoName)

	// 发起 GET 请求
	resp, err := http.Get(apiURL)
	if err != nil {
		return "NULL", err
	}
	defer resp.Body.Close()

	// 解析 JSON 响应
	var release Release
	if err := json.NewDecoder(resp.Body).Decode(&release); err != nil {
		return "NULL", err
	}

	return release.TagName, nil
}

// 读取本地版本
func GetLocalVersion() {
	// 读取核心版本
	Command := exec.Command("cmd", "/c", "mihomo-windows-amd64 -v")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Output, _ := Command.Output()
	CoreLocalVersion = strings.TrimSpace(regexp.MustCompile(`Mihomo Meta(.*?)windows`).FindStringSubmatch(string(Output))[1])
	// 读取面板版本
	// 获取当前工作目录
	currentDir, _ := os.Getwd()
	// 读取文件内容
	content, err := os.ReadFile(filepath.Join(currentDir, "ui", "version"))
	if err != nil {
		DashboardLocalVersion = "NULL"
	} else {
		DashboardLocalVersion = strings.TrimSpace(string(content))
	}
}

// 获取最新版本
func GetRemoteVersion() {
	// 获取核心版本
	CoreRemoteVersion, _ = GetLatestVersion("MetaCubeX", "mihomo")

	// 获取面板版本
	DashboardRemoteVersion, _ = GetLatestVersion("MetaCubeX", "metacubexd")

}

// 升级 Core
func UpdateCore() {
	// 获取核心版本
	CoreRemoteVersion, _ = GetLatestVersion("MetaCubeX", "mihomo")
	// 获取失败 or 版本相同 结束子程序
	if CoreRemoteVersion == "NULL" || CoreRemoteVersion == CoreLocalVersion {
		return
	}
	// 生成最新版本的下载地址
	DownloadLink := "(New-Object Net.WebClient).DownloadFile('https://github.com/MetaCubeX/mihomo/releases/download/" + CoreRemoteVersion + "/mihomo-windows-amd64-" + CoreRemoteVersion + ".zip','mihomo.zip')"
	// 下载压缩包
	Command := exec.Command("powershell", DownloadLink)
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	_, err := Command.Output()
	if err != nil {
		return
	}
	// 停止 Core
	StopMihomo()
	// 解压缩文件
	Command = exec.Command("powershell", "Expand-Archive -Force mihomo.zip ./")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Command.Run()
	// 删除压缩包
	Command = exec.Command("cmd", "/c", "del /f /q", "mihomo.zip")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Command.Run()
}

// 升级 Core
func UpdateDashboard() {
	// 获取面板版本
	DashboardRemoteVersion, _ = GetLatestVersion("MetaCubeX", "metacubexd")
	// 获取失败 or 版本相同 结束子程序
	if DashboardRemoteVersion == "NULL" || DashboardRemoteVersion == DashboardLocalVersion {
		return
	}
	// 生成最新版本的下载地址
	DownloadLink := "(New-Object Net.WebClient).DownloadFile('https://github.com/MetaCubeX/metacubexd/releases/download/" + DashboardRemoteVersion + "/compressed-dist.tgz','./ui/ui.tgz')"
	// 下载压缩包
	Command := exec.Command("powershell", DownloadLink)
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	_, err := Command.Output()
	if err != nil {
		return
	}
	// 解压缩文件
	Command = exec.Command("powershell", "tar -xzf .\\ui\\ui.tgz -C .\\ui")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Command.Run()
	// 删除压缩包
	Command = exec.Command("cmd", "/c", "del /f /q", ".\\ui\\ui.tgz")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Command.Run()
	// 写入版本文件
	Command = exec.Command("cmd", "/c", "echo "+DashboardRemoteVersion+" > .\\ui\\version")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Command.Run()
}

// 启动 Mihomo
func StartMihomo() {
	Command := exec.Command("cmd", "/c", "mihomo-windows-amd64 -d .")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Command.Start()
}

// 停止Mihomo
func StopMihomo() {
	// 卸载 TUN 网卡
	Command := exec.Command("powershell", `pnputil /remove-device (Get-PnpDevice | Where-Object{$_.Name -eq "Meta Tunnel"}).InstanceId`)
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Command.Run()
	// 停止 Core
	Command = exec.Command("cmd", "/c", "taskkill /f /im mihomo-windows-amd64.exe")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Command.Run()
}

// 显示通知
func ShowMessage() {
	// 延时
	time.Sleep(time.Duration(2) * time.Second)
	// 读取Mihomo运行状态
	Command := exec.Command("powershell", "Get-Process mihomo-windows-amd64")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	_, err := Command.Output()
	if err == nil {
		MihomoStatus = "Running"
	} else {
		MihomoStatus = "Stopped"
	}
	// 读取Tun运行状态
	Command = exec.Command("powershell", "Get-NetAdapter Meta")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	_, err = Command.Output()
	if err == nil {
		TunStatus = "Running"
	} else {
		TunStatus = "Stopped"
	}
	// 显示通知
	NotifyIcon.ShowMessage("", "CoreLocalVersion ------------- "+CoreLocalVersion+"\r\n"+"CoreRemoteVersion ---------- "+CoreRemoteVersion+"\r\n"+"DashboardLocalVersion ------ "+DashboardLocalVersion+"\r\n"+"DashboardRemoteVersion --- "+DashboardRemoteVersion+"\r\n"+"Core --------------------------- "+MihomoStatus+"\r\n"+"Tun ---------------------------- "+TunStatus)
}
func init() {
	// 阻止多次启动
	Mutex, _ := syscall.UTF16PtrFromString("MihomoLite")
	_, _, err := syscall.NewLazyDLL("kernel32.dll").NewProc("CreateMutexW").Call(0, 0, uintptr(unsafe.Pointer(Mutex)))
	if int(err.(syscall.Errno)) != 0 {
		os.Exit(1)
	}
	// 创建ICO
	os.WriteFile("icon.ico", IcoData, 0644)
}
func main() {
	// 定义托盘图标文字
	MainWindow, _ = walk.NewMainWindow()
	Icon, _ = walk.Resources.Icon("icon.ico")
	// 删除图标
	Command := exec.Command("cmd", "/c", "del /f /q icon.ico")
	Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
	Command.Start()
	NotifyIcon, _ = walk.NewNotifyIcon(MainWindow)
	defer NotifyIcon.Dispose()
	NotifyIcon.SetIcon(Icon)
	NotifyIcon.SetToolTip("MihomoLite")
	NotifyIcon.SetVisible(true)
	// 定义左键显示
	NotifyIcon.MouseDown().Attach(func(x, y int, button walk.MouseButton) {
		if button != walk.LeftButton {
			return
		}
		// 显示通知
		ShowMessage()
	})
	// 定义右键菜单元素
	Sign := walk.NewAction()
	Sign.SetText("Designed by Amaury")
	blank1 := walk.NewAction()
	blank1.SetText("-")
	blank2 := walk.NewAction()
	blank2.SetText("-")
	blank3 := walk.NewAction()
	blank3.SetText("-")
	blank4 := walk.NewAction()
	blank4.SetText("-")
	blank5 := walk.NewAction()
	blank5.SetText("-")
	Start := walk.NewAction()
	Start.SetText("Start")
	Stop := walk.NewAction()
	Stop.SetText("Stop")
	Dashboard := walk.NewAction()
	Dashboard.SetText("Dashboard")
	Update := walk.NewAction()
	Update.SetText("Update")
	Exit := walk.NewAction()
	Exit.SetText("Exit")
	// 定义右键菜单
	NotifyIcon.ContextMenu().Actions().Add(Sign)
	NotifyIcon.ContextMenu().Actions().Add(blank1)
	NotifyIcon.ContextMenu().Actions().Add(Start)
	NotifyIcon.ContextMenu().Actions().Add(blank2)
	NotifyIcon.ContextMenu().Actions().Add(Stop)
	NotifyIcon.ContextMenu().Actions().Add(blank3)
	NotifyIcon.ContextMenu().Actions().Add(Dashboard)
	NotifyIcon.ContextMenu().Actions().Add(blank4)
	NotifyIcon.ContextMenu().Actions().Add(Update)
	NotifyIcon.ContextMenu().Actions().Add(blank5)
	NotifyIcon.ContextMenu().Actions().Add(Exit)
	// 启动Mihomo
	Start.Triggered().Attach(func() {
		// 停止Mihomo
		StopMihomo()
		// 启动Mihomo
		StartMihomo()
		// 显示通知
		ShowMessage()
	})
	// 停止Mihomo
	Stop.Triggered().Attach(func() {
		// 停止Mihomo
		StopMihomo()
		// 显示通知
		ShowMessage()
	})
	// 打开Dashboard
	Dashboard.Triggered().Attach(func() {
		Command := exec.Command("cmd", "/c", "start", "http://127.0.0.1:9090/ui/")
		Command.SysProcAttr = &syscall.SysProcAttr{HideWindow: true}
		Command.Start()
	})
	// Update
	Update.Triggered().Attach(func() {
		// 停止Mihomo
		StopMihomo()
		// 启动Mihomo
		StartMihomo()
		// 升级
		UpdateDashboard()
		UpdateCore()
		// 获取本地版本
		GetLocalVersion()
		// 停止Mihomo
		StopMihomo()
		// 启动Mihomo
		StartMihomo()
		// 显示通知
		ShowMessage()
	})
	// Exit
	Exit.Triggered().Attach(func() {
		// 停止Mihomo
		StopMihomo()
		// 退出主程序
		walk.App().Exit(0)
	})
	// 获取本地版本
	GetLocalVersion()
	// 停止Mihomo
	StopMihomo()
	// 启动Mihomo
	StartMihomo()
	// 获取在线版本
	GetRemoteVersion()
	// 显示通知
	ShowMessage()
	// 主程序运行
	MainWindow.Run()
}
